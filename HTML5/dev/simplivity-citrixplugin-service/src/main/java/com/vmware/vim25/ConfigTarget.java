//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.6 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2019.06.12 at 09:16:35 AM EDT 
//


package com.vmware.vim25;



/**
 * 
 */
@SuppressWarnings("all")
public class ConfigTarget
    extends DynamicData
{

    public int numCpus;
    public int numCpuCores;
    public int numNumaNodes;
    public Boolean smcPresent;
    private final static VirtualMachineDatastoreInfo[] NULL_DATASTORE_ARRAY = new VirtualMachineDatastoreInfo[ 0 ] ;
    public VirtualMachineDatastoreInfo[] datastore;
    private final static VirtualMachineNetworkInfo[] NULL_NETWORK_ARRAY = new VirtualMachineNetworkInfo[ 0 ] ;
    public VirtualMachineNetworkInfo[] network;
    private final static OpaqueNetworkTargetInfo[] NULL_OPAQUE_NETWORK_ARRAY = new OpaqueNetworkTargetInfo[ 0 ] ;
    public OpaqueNetworkTargetInfo[] opaqueNetwork;
    private final static DistributedVirtualPortgroupInfo[] NULL_DISTRIBUTED_VIRTUAL_PORTGROUP_ARRAY = new DistributedVirtualPortgroupInfo[ 0 ] ;
    public DistributedVirtualPortgroupInfo[] distributedVirtualPortgroup;
    private final static DistributedVirtualSwitchInfo[] NULL_DISTRIBUTED_VIRTUAL_SWITCH_ARRAY = new DistributedVirtualSwitchInfo[ 0 ] ;
    public DistributedVirtualSwitchInfo[] distributedVirtualSwitch;
    private final static VirtualMachineCdromInfo[] NULL_CD_ROM_ARRAY = new VirtualMachineCdromInfo[ 0 ] ;
    public VirtualMachineCdromInfo[] cdRom;
    private final static VirtualMachineSerialInfo[] NULL_SERIAL_ARRAY = new VirtualMachineSerialInfo[ 0 ] ;
    public VirtualMachineSerialInfo[] serial;
    private final static VirtualMachineParallelInfo[] NULL_PARALLEL_ARRAY = new VirtualMachineParallelInfo[ 0 ] ;
    public VirtualMachineParallelInfo[] parallel;
    private final static VirtualMachineSoundInfo[] NULL_SOUND_ARRAY = new VirtualMachineSoundInfo[ 0 ] ;
    public VirtualMachineSoundInfo[] sound;
    private final static VirtualMachineUsbInfo[] NULL_USB_ARRAY = new VirtualMachineUsbInfo[ 0 ] ;
    public VirtualMachineUsbInfo[] usb;
    private final static VirtualMachineFloppyInfo[] NULL_FLOPPY_ARRAY = new VirtualMachineFloppyInfo[ 0 ] ;
    public VirtualMachineFloppyInfo[] floppy;
    private final static VirtualMachineLegacyNetworkSwitchInfo[] NULL_LEGACY_NETWORK_INFO_ARRAY = new VirtualMachineLegacyNetworkSwitchInfo[ 0 ] ;
    public VirtualMachineLegacyNetworkSwitchInfo[] legacyNetworkInfo;
    private final static VirtualMachineScsiPassthroughInfo[] NULL_SCSI_PASSTHROUGH_ARRAY = new VirtualMachineScsiPassthroughInfo[ 0 ] ;
    public VirtualMachineScsiPassthroughInfo[] scsiPassthrough;
    private final static VirtualMachineScsiDiskDeviceInfo[] NULL_SCSI_DISK_ARRAY = new VirtualMachineScsiDiskDeviceInfo[ 0 ] ;
    public VirtualMachineScsiDiskDeviceInfo[] scsiDisk;
    private final static VirtualMachineIdeDiskDeviceInfo[] NULL_IDE_DISK_ARRAY = new VirtualMachineIdeDiskDeviceInfo[ 0 ] ;
    public VirtualMachineIdeDiskDeviceInfo[] ideDisk;
    public int maxMemMBOptimalPerf;
    public ResourcePoolRuntimeInfo resourcePool;
    public Boolean autoVmotion;
    private final static VirtualMachinePciPassthroughInfo[] NULL_PCI_PASSTHROUGH_ARRAY = new VirtualMachinePciPassthroughInfo[ 0 ] ;
    public VirtualMachinePciPassthroughInfo[] pciPassthrough;
    private final static VirtualMachineSriovInfo[] NULL_SRIOV_ARRAY = new VirtualMachineSriovInfo[ 0 ] ;
    public VirtualMachineSriovInfo[] sriov;
    private final static VirtualMachineVFlashModuleInfo[] NULL_V_FLASH_MODULE_ARRAY = new VirtualMachineVFlashModuleInfo[ 0 ] ;
    public VirtualMachineVFlashModuleInfo[] vFlashModule;
    private final static VirtualMachinePciSharedGpuPassthroughInfo[] NULL_SHARED_GPU_PASSTHROUGH_TYPES_ARRAY = new VirtualMachinePciSharedGpuPassthroughInfo[ 0 ] ;
    public VirtualMachinePciSharedGpuPassthroughInfo[] sharedGpuPassthroughTypes;
    public Long availablePersistentMemoryReservationMB;

    public int getNumCpus() {
        return numCpus;
    }

    public void setNumCpus(int numCpus) {
        this.numCpus = numCpus;
    }

    public int getNumCpuCores() {
        return numCpuCores;
    }

    public void setNumCpuCores(int numCpuCores) {
        this.numCpuCores = numCpuCores;
    }

    public int getNumNumaNodes() {
        return numNumaNodes;
    }

    public void setNumNumaNodes(int numNumaNodes) {
        this.numNumaNodes = numNumaNodes;
    }

    public Boolean getSmcPresent() {
        return smcPresent;
    }

    public void setSmcPresent(Boolean smcPresent) {
        this.smcPresent = smcPresent;
    }

    public Boolean isSmcPresent() {
        return smcPresent;
    }

    public VirtualMachineDatastoreInfo[] getDatastore() {
        if ((datastore) == null) {
            return (NULL_DATASTORE_ARRAY);
        }
        return datastore;
    }

    public void setDatastore(VirtualMachineDatastoreInfo[] datastore) {
        this.datastore = datastore;
    }

    public VirtualMachineNetworkInfo[] getNetwork() {
        if ((network) == null) {
            return (NULL_NETWORK_ARRAY);
        }
        return network;
    }

    public void setNetwork(VirtualMachineNetworkInfo[] network) {
        this.network = network;
    }

    public OpaqueNetworkTargetInfo[] getOpaqueNetwork() {
        if ((opaqueNetwork) == null) {
            return (NULL_OPAQUE_NETWORK_ARRAY);
        }
        return opaqueNetwork;
    }

    public void setOpaqueNetwork(OpaqueNetworkTargetInfo[] opaqueNetwork) {
        this.opaqueNetwork = opaqueNetwork;
    }

    public DistributedVirtualPortgroupInfo[] getDistributedVirtualPortgroup() {
        if ((distributedVirtualPortgroup) == null) {
            return (NULL_DISTRIBUTED_VIRTUAL_PORTGROUP_ARRAY);
        }
        return distributedVirtualPortgroup;
    }

    public void setDistributedVirtualPortgroup(DistributedVirtualPortgroupInfo[] distributedVirtualPortgroup) {
        this.distributedVirtualPortgroup = distributedVirtualPortgroup;
    }

    public DistributedVirtualSwitchInfo[] getDistributedVirtualSwitch() {
        if ((distributedVirtualSwitch) == null) {
            return (NULL_DISTRIBUTED_VIRTUAL_SWITCH_ARRAY);
        }
        return distributedVirtualSwitch;
    }

    public void setDistributedVirtualSwitch(DistributedVirtualSwitchInfo[] distributedVirtualSwitch) {
        this.distributedVirtualSwitch = distributedVirtualSwitch;
    }

    public VirtualMachineCdromInfo[] getCdRom() {
        if ((cdRom) == null) {
            return (NULL_CD_ROM_ARRAY);
        }
        return cdRom;
    }

    public void setCdRom(VirtualMachineCdromInfo[] cdRom) {
        this.cdRom = cdRom;
    }

    public VirtualMachineSerialInfo[] getSerial() {
        if ((serial) == null) {
            return (NULL_SERIAL_ARRAY);
        }
        return serial;
    }

    public void setSerial(VirtualMachineSerialInfo[] serial) {
        this.serial = serial;
    }

    public VirtualMachineParallelInfo[] getParallel() {
        if ((parallel) == null) {
            return (NULL_PARALLEL_ARRAY);
        }
        return parallel;
    }

    public void setParallel(VirtualMachineParallelInfo[] parallel) {
        this.parallel = parallel;
    }

    public VirtualMachineSoundInfo[] getSound() {
        if ((sound) == null) {
            return (NULL_SOUND_ARRAY);
        }
        return sound;
    }

    public void setSound(VirtualMachineSoundInfo[] sound) {
        this.sound = sound;
    }

    public VirtualMachineUsbInfo[] getUsb() {
        if ((usb) == null) {
            return (NULL_USB_ARRAY);
        }
        return usb;
    }

    public void setUsb(VirtualMachineUsbInfo[] usb) {
        this.usb = usb;
    }

    public VirtualMachineFloppyInfo[] getFloppy() {
        if ((floppy) == null) {
            return (NULL_FLOPPY_ARRAY);
        }
        return floppy;
    }

    public void setFloppy(VirtualMachineFloppyInfo[] floppy) {
        this.floppy = floppy;
    }

    public VirtualMachineLegacyNetworkSwitchInfo[] getLegacyNetworkInfo() {
        if ((legacyNetworkInfo) == null) {
            return (NULL_LEGACY_NETWORK_INFO_ARRAY);
        }
        return legacyNetworkInfo;
    }

    public void setLegacyNetworkInfo(VirtualMachineLegacyNetworkSwitchInfo[] legacyNetworkInfo) {
        this.legacyNetworkInfo = legacyNetworkInfo;
    }

    public VirtualMachineScsiPassthroughInfo[] getScsiPassthrough() {
        if ((scsiPassthrough) == null) {
            return (NULL_SCSI_PASSTHROUGH_ARRAY);
        }
        return scsiPassthrough;
    }

    public void setScsiPassthrough(VirtualMachineScsiPassthroughInfo[] scsiPassthrough) {
        this.scsiPassthrough = scsiPassthrough;
    }

    public VirtualMachineScsiDiskDeviceInfo[] getScsiDisk() {
        if ((scsiDisk) == null) {
            return (NULL_SCSI_DISK_ARRAY);
        }
        return scsiDisk;
    }

    public void setScsiDisk(VirtualMachineScsiDiskDeviceInfo[] scsiDisk) {
        this.scsiDisk = scsiDisk;
    }

    public VirtualMachineIdeDiskDeviceInfo[] getIdeDisk() {
        if ((ideDisk) == null) {
            return (NULL_IDE_DISK_ARRAY);
        }
        return ideDisk;
    }

    public void setIdeDisk(VirtualMachineIdeDiskDeviceInfo[] ideDisk) {
        this.ideDisk = ideDisk;
    }

    public int getMaxMemMBOptimalPerf() {
        return maxMemMBOptimalPerf;
    }

    public void setMaxMemMBOptimalPerf(int maxMemMBOptimalPerf) {
        this.maxMemMBOptimalPerf = maxMemMBOptimalPerf;
    }

    public ResourcePoolRuntimeInfo getResourcePool() {
        return resourcePool;
    }

    public void setResourcePool(ResourcePoolRuntimeInfo resourcePool) {
        this.resourcePool = resourcePool;
    }

    public Boolean getAutoVmotion() {
        return autoVmotion;
    }

    public void setAutoVmotion(Boolean autoVmotion) {
        this.autoVmotion = autoVmotion;
    }

    public Boolean isAutoVmotion() {
        return autoVmotion;
    }

    public VirtualMachinePciPassthroughInfo[] getPciPassthrough() {
        if ((pciPassthrough) == null) {
            return (NULL_PCI_PASSTHROUGH_ARRAY);
        }
        return pciPassthrough;
    }

    public void setPciPassthrough(VirtualMachinePciPassthroughInfo[] pciPassthrough) {
        this.pciPassthrough = pciPassthrough;
    }

    public VirtualMachineSriovInfo[] getSriov() {
        if ((sriov) == null) {
            return (NULL_SRIOV_ARRAY);
        }
        return sriov;
    }

    public void setSriov(VirtualMachineSriovInfo[] sriov) {
        this.sriov = sriov;
    }

    public VirtualMachineVFlashModuleInfo[] getVFlashModule() {
        if ((vFlashModule) == null) {
            return (NULL_V_FLASH_MODULE_ARRAY);
        }
        return vFlashModule;
    }

    public void setVFlashModule(VirtualMachineVFlashModuleInfo[] vFlashModule) {
        this.vFlashModule = vFlashModule;
    }

    public VirtualMachinePciSharedGpuPassthroughInfo[] getSharedGpuPassthroughTypes() {
        if ((sharedGpuPassthroughTypes) == null) {
            return (NULL_SHARED_GPU_PASSTHROUGH_TYPES_ARRAY);
        }
        return sharedGpuPassthroughTypes;
    }

    public void setSharedGpuPassthroughTypes(VirtualMachinePciSharedGpuPassthroughInfo[] sharedGpuPassthroughTypes) {
        this.sharedGpuPassthroughTypes = sharedGpuPassthroughTypes;
    }

    public Long getAvailablePersistentMemoryReservationMB() {
        return availablePersistentMemoryReservationMB;
    }

    public void setAvailablePersistentMemoryReservationMB(Long availablePersistentMemoryReservationMB) {
        this.availablePersistentMemoryReservationMB = availablePersistentMemoryReservationMB;
    }

}
